Index: app/src/main/java/com/example/meetyou/OwnProfileActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meetyou;\r\n\r\nimport android.Manifest;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.location.Location;\r\nimport android.location.LocationListener;\r\nimport android.location.LocationManager;\r\nimport android.os.Bundle;\r\nimport android.util.Base64;\r\nimport android.view.View;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.example.meetyou.MYFiles.Users;\r\nimport com.example.meetyou.databinding.ActivityOwnProfileBinding;\r\nimport com.google.firebase.database.DataSnapshot;\r\nimport com.google.firebase.database.DatabaseError;\r\nimport com.google.firebase.database.DatabaseReference;\r\nimport com.google.firebase.database.FirebaseDatabase;\r\nimport com.google.firebase.database.ValueEventListener;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.Locale;\r\n\r\npublic class OwnProfileActivity extends AppCompatActivity {\r\n    public String photo1URL;\r\n    public String photo2URL;\r\n    public String photo3URL;\r\n    public String photo4URL;\r\n    public String photo5URL;\r\n    private LocationManager locationManager;\r\n    private LocationListener locationListener;\r\n\r\n    // Объект для привязки макета активности\r\n    ActivityOwnProfileBinding binding;\r\n\r\n    private DatabaseReference mDatabase;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        // Привязка макета активности\r\n        binding = ActivityOwnProfileBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        // Установка цвета статус-бара\r\n        getWindow().setStatusBarColor(ContextCompat.getColor(OwnProfileActivity.this, R.color.main));\r\n\r\n        // Получение данных пользователя и отображение их в представлении\r\n        String nameText = getUserName() + \", \" + Integer.toString(getUserAge());\r\n        binding.nameTextView.setText(nameText);\r\n        binding.additionalTextView.setText(getUserBio());\r\n\r\n        // Чтение данных из Firebase Database и передача в локальные переменные\r\n        Users.getUserDataFromFirebase(getUID(), new Users.OnUserDataListener() {\r\n            @Override\r\n            public void onDataLoaded(Users user) {\r\n                // Здесь можно использовать значения photo1, photo2, photo3, photo4, photo5\r\n                photo1URL = user.getPhoto1();\r\n                photo2URL = user.getPhoto2();\r\n                photo3URL = user.getPhoto3();\r\n                photo4URL = user.getPhoto4();\r\n                photo5URL = user.getPhoto5();\r\n            }\r\n\r\n            @Override\r\n            public void onDataNotAvailable() {\r\n                // Обработка случая, если данные не удалось загрузить\r\n            }\r\n        });\r\n\r\n        customPhotoLoadingToClient(\"photo1\", binding.profilePhoto);\r\n        customPhotoLoadingToClient(\"photo1\", binding.image1);\r\n        customPhotoLoadingToClient(\"photo2\", binding.image2);\r\n        customPhotoLoadingToClient(\"photo3\", binding.image3);\r\n        customPhotoLoadingToClient(\"photo4\", binding.image4);\r\n        customPhotoLoadingToClient(\"photo5\", binding.image5);\r\n\r\n//        Glide.with(getApplicationContext()).load(photo1URL).into(binding.profilePhoto);\r\n//        Glide.with(getApplicationContext()).load(photo1URL).into(binding.image1);\r\n//        Glide.with(getApplicationContext()).load(photo2URL).into(binding.image2);\r\n//        Glide.with(getApplicationContext()).load(photo3URL).into(binding.image3);\r\n//        Glide.with(getApplicationContext()).load(photo4URL).into(binding.image4);\r\n//        Glide.with(getApplicationContext()).load(photo5URL).into(binding.image5);\r\n\r\n\r\n        // Обработчик кнопки \"Настройки\", переход к активности OptionsActivity\r\n        binding.settingButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(OwnProfileActivity.this, OptionsActivity.class);\r\n                startActivity(intent);\r\n            }\r\n        });\r\n\r\n        // Обработчик кнопки \"Найти\", переход к активности MainActivity и завершение текущей активности\r\n        binding.findButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Intent intent = new Intent(OwnProfileActivity.this, MainActivity.class);\r\n                startActivity(intent);\r\n                finish();\r\n            }\r\n        });\r\n\r\n        // Получение LocationManager и установка слушателя для обновления местоположения\r\n        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\r\n        locationListener = new LocationListener() {\r\n            @Override\r\n            public void onLocationChanged(Location location) {\r\n                updateLocationTextView(location);\r\n            }\r\n\r\n            @Override\r\n            public void onStatusChanged(String provider, int status, Bundle extras) {\r\n                // Метод вызывается при изменении статуса провайдера (GPS или сеть)\r\n            }\r\n\r\n            @Override\r\n            public void onProviderEnabled(String provider) {\r\n                // Метод вызывается, когда пользователь включает провайдер (GPS или сеть)\r\n            }\r\n\r\n            @Override\r\n            public void onProviderDisabled(String provider) {\r\n                // Метод вызывается, когда пользователь отключает провайдер (GPS или сеть)\r\n            }\r\n        };\r\n\r\n        // Проверка наличия разрешения на доступ к местоположению, и запрос разрешения, если требуется\r\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\r\n            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n\r\n        // Проверка, были ли внесены изменения, и пересоздание активности для их отображения\r\n        if (getChanges()) {\r\n            setSomethingWasChanged(false);\r\n            recreate();\r\n        }\r\n\r\n        // Проверка наличия разрешения на доступ к местоположению и запрос обновлений местоположения\r\n        if (locationManager != null) {\r\n            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\r\n                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 10000, 10, locationListener);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n        // Остановка обновлений местоположения при остановке активности\r\n        if (locationManager != null) {\r\n            locationManager.removeUpdates(locationListener);\r\n        }\r\n    }\r\n\r\n    // Обновление текстового представления с местоположением\r\n    private void updateLocationTextView(Location location) {\r\n        if (location != null) {\r\n            double latitude = location.getLatitude();\r\n            double longitude = location.getLongitude();\r\n\r\n            Geocoder geocoder = new Geocoder(this, Locale.getDefault());\r\n            try {\r\n                List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1);\r\n                if (!addresses.isEmpty()) {\r\n                    String country = addresses.get(0).getCountryName();\r\n                    String city = addresses.get(0).getLocality();\r\n                    String locationString = country + \", \" + city;\r\n                    binding.locationTextView.setText(locationString);\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Методы для получения данных пользователя из SharedPreferences\r\n    private String getUserBio() {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", MODE_PRIVATE);\r\n        return sharedPreferences.getString(\"bio\", \"\");\r\n    }\r\n\r\n    private int getUserAge() {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", Context.MODE_PRIVATE);\r\n        return sharedPreferences.getInt(\"age\", 0);\r\n    }\r\n\r\n    private String getUserName() {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", MODE_PRIVATE);\r\n        return sharedPreferences.getString(\"name\", \"\");\r\n    }\r\n\r\n    private boolean getChanges() {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", MODE_PRIVATE);\r\n        return sharedPreferences.getBoolean(\"isSomethingWasChanged\", false);\r\n    }\r\n\r\n    // Преобразование закодированного изображения в Bitmap\r\n    private Bitmap getImageBitmapFromSharedPreferences(String key) {\r\n        byte[] imageByteArray = getImageFromSharedPreferences(key);\r\n        if (imageByteArray != null) {\r\n            return BitmapFactory.decodeByteArray(imageByteArray, 0, imageByteArray.length);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Получение закодированного изображения из SharedPreferences\r\n    private byte[] getImageFromSharedPreferences(String key) {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", MODE_PRIVATE);\r\n        String base64Image = sharedPreferences.getString(key, null);\r\n        if (base64Image != null) {\r\n            return Base64.decode(base64Image, Base64.DEFAULT);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Установка флага, указывающего на наличие изменений\r\n    private void setSomethingWasChanged(boolean parameter) {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        editor.putBoolean(\"isSomethingWasChanged\", parameter);\r\n        editor.apply();\r\n    }\r\n\r\n    private void customPhotoLoadingToClient(String photoName, ImageView imageView){\r\n        DatabaseReference Images = FirebaseDatabase.getInstance().getReference(\"Users\").child(getUID()).child(photoName);\r\n        Images.addValueEventListener(new ValueEventListener() {\r\n            @Override\r\n            public void onDataChange(@NonNull DataSnapshot snapshot) {\r\n                String value = snapshot.getValue(String.class);\r\n                Picasso.get().load(value).into(imageView);\r\n            }\r\n\r\n            @Override\r\n            public void onCancelled(@NonNull DatabaseError error) {\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n    private String getUID() {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(\"UserPrefs\", MODE_PRIVATE);\r\n        return sharedPreferences.getString(\"UID\", \"\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/meetyou/OwnProfileActivity.java b/app/src/main/java/com/example/meetyou/OwnProfileActivity.java
--- a/app/src/main/java/com/example/meetyou/OwnProfileActivity.java	(revision e265ba0b9503d218e1e2f0a00ce653bad3c0d141)
+++ b/app/src/main/java/com/example/meetyou/OwnProfileActivity.java	(date 1690925812900)
@@ -61,7 +61,8 @@
         getWindow().setStatusBarColor(ContextCompat.getColor(OwnProfileActivity.this, R.color.main));
 
         // Получение данных пользователя и отображение их в представлении
-        String nameText = getUserName() + ", " + Integer.toString(getUserAge());
+        int userAge = getUserAge();
+        String nameText = getUserName() + ", " + (Integer.toString(userAge));
         binding.nameTextView.setText(nameText);
         binding.additionalTextView.setText(getUserBio());
 
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision e265ba0b9503d218e1e2f0a00ce653bad3c0d141)
+++ /dev/null	(revision e265ba0b9503d218e1e2f0a00ce653bad3c0d141)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\fajar\.android\avd\Pixel_3a_API_34_extension_level_7_x86_64.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2023-08-01T19:24:24.868898200Z" />
-  </component>
-</project>
\ No newline at end of file
